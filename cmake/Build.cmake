if(NOT MSVC)
	list(APPEND CMAKE_CXX_FLAGS "-std=gnu++11 -g -Wall -Wextra -ftest-coverage -fprofile-arcs")
endif()

file(GLOB_RECURSE AETHER_SRCS "${CMAKE_CURRENT_LIST_DIR}/../src/*.cpp" "${CMAKE_CURRENT_LIST_DIR}/../src/*.h")
set(AETHER_BASE_DIR ${CMAKE_CURRENT_LIST_DIR})
message(${CMAKE_CURRENT_LIST_DIR})

# to be set from the outside when calling cmake command
set(AETHER_USE_ALLEGRO TRUE)

if(${AETHER_USE_ALLEGRO})
    add_definitions(-DAETHER_USE_ALLEGRO)
    function(ADD_AETHER_TARGET EXEC-NAME SRCS)
        add_executable(${EXEC-NAME} ${AETHER_SRCS} ${SRCS})
        target_include_directories(${EXEC-NAME} PUBLIC "${AETHER_BASE_DIR}/../src")
		if(NOT MSVC) 
			set_target_properties(${EXEC-NAME} PROPERTIES
					COMPILE_FLAGS "-std=c++11"
					LINK_FLAGS "-g -ftest-coverage -fprofile-arcs"
					)
		endif()
        if(WIN32)
                if(NOT MSVC)
					target_link_libraries(${EXEC-NAME} allegro_monolith)
				endif()
        elseif(UNIX)
                target_link_libraries(${EXEC-NAME} allegro)
                target_link_libraries(${EXEC-NAME} allegro_image)
                target_link_libraries(${EXEC-NAME} allegro_primitives)
                target_link_libraries(${EXEC-NAME} allegro_font)
                target_link_libraries(${EXEC-NAME} allegro_ttf)
                target_link_libraries(${EXEC-NAME} allegro_audio)
                target_link_libraries(${EXEC-NAME} allegro_acodec)
        else()
                message(SEND_FATAL "Unknown platform")
        endif()
    endfunction(ADD_AETHER_TARGET)
endif()

if(WIN32)
	if(NOT MSVC)
		list(APPEND CMAKE_EXE_LINKER_FLAGS "-static-libstdc++ -static-libgcc")
	endif()
	set(EXECUTABLE_OUTPUT_PATH ${CMAKE_HOME_DIRECTORY}/bin/win32)
elseif(UNIX)
	set(EXECUTABLE_OUTPUT_PATH ${CMAKE_HOME_DIRECTORY}/bin/linux)
endif()
